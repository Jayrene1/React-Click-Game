{"version":3,"sources":["Components/Image.jsx","Components/Gallery.jsx","App.js","serviceWorker.js","index.js"],"names":["Image","props","react_default","a","createElement","className","src","image","alt","concat","id","onClick","imageClicked","clicked","Gallery","state","images","clickLog","score","highScore","console","log","includes","_this","setState","push","clone","sort","Math","random","_this2","this","Fragment","map","index","Components_Image","key","Component","App","href","Components_Gallery","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b8b2f21.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Image(props) {\r\n  return (\r\n    <div className=\"click-item\">\r\n      <img\r\n        src={props.image.image}\r\n        className=\"responsive-img\"\r\n        alt={`macaron ${props.image.id}`}\r\n        onClick={() => props.imageClicked(props.image.id)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","import React, { Component } from \"react\";\r\nimport Image from \"./Image.jsx\";\r\nimport images from \"../images.json\";\r\n\r\nlet clicked = [];\r\n\r\nclass Gallery extends Component {\r\n  state = {\r\n    images: images,\r\n    clickLog: \"Choose a macaron\",\r\n    score: 0,\r\n    highScore: 0\r\n  };\r\n\r\n  imageClicked = id => {\r\n    console.log(\"image clicked\" + id);\r\n    if (clicked.includes(id)) {\r\n      if (this.state.score > this.state.highScore) {\r\n        this.setState({ highScore: this.state.score });\r\n      }\r\n      this.setState({\r\n          score: 0,\r\n          clickLog: \"You already chose that one!\"\r\n        });\r\n      clicked = [];\r\n    } else {\r\n      clicked.push(id);\r\n      let clone = this.state.images.sort(() => Math.random() - 0.5);\r\n      this.setState({\r\n        images: clone,\r\n        score: this.state.score + 1,\r\n        clickLog: \"Correct guess!\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"grey lighten-3\">\r\n            <div className=\"container\">\r\n                <div id=\"info\">\r\n                    <div id=\"a\">\r\n                        <div id=\"scoreboard\">\r\n                            <h4 className=\"purple-text\">Score: {this.state.score}</h4>\r\n                            <h4 className=\"deep-purple-text\">High Score: {this.state.highScore}</h4>\r\n                        </div>\r\n                    </div>\r\n                    <p className=\"grey-text text-darken-1\" id=\"b\">Try to click all the macarons, but don't choose any twice</p>\r\n                    <h4 className=\"grey-text text-darken-3\" id=\"c\">{this.state.clickLog}</h4>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"container\">\r\n            <div className=\"divider\" />\r\n            <div id=\"gallery\">\r\n                {this.state.images.map((image, index) => (\r\n                    <Image key={index} image={image} imageClicked={this.imageClicked} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Gallery from \"./Components/Gallery.jsx\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <header className=\"App\">\n          <nav>\n            <div className=\"nav-wrapper purple lighten-3\">\n              <a href=\"https://jayrene1.github.io/React-Click-Game/\" className=\"brand-logo center\">\n                React Click Game\n              </a>\n            </div>\n          </nav>\n        </header>\n        <main>\n          <Gallery />\n        </main>\n        <div className=\"divider\"></div>\n        <footer className=\"page-footer\">\n          <div className=\"footer-copyright\">\n            <div className=\"container\">\n              Â© Joshua Arcega, 2019\n              <a className=\"purple-text text-darken-2 right\" href=\"https://github.com/Jayrene1/React-Click-Game\">\n                Github\n              </a>\n            </div>\n          </div>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}